{"version":3,"sources":["PhotoServiceContext.js","HeaderBreadcrumb.js","AlbumsList.js","ViewPhoto.js","Modal.js","ImageModal.js","ViewAlbum.js","About.js","GooglePhotosService.js","App.js","serviceWorker.js","index.js"],"names":["context","createContext","undefined","HeaderBreadcrumb","props","react_default","a","createElement","className","albumDetails","title","react_router_dom","to","AlbumsList","service","useContext","PhotoServiceContext","_useState","useState","_useState2","Object","slicedToArray","albums","setAlbums","_useState3","_useState4","isLoading","setIsLoading","useEffect","loadAlbums","then","arg","newAlbums","map","obj","key","id","src","coverPhotoBaseUrl","alt","length","src_HeaderBreadcrumb","ViewPhoto","photoID","photoNumber","photosTotal","console","log","photoDetails","setPhotoDetails","loadPhotoDetail","match","baseUrl","modalRoot","document","getElementById","Modal","el","setAttribute","appendChild","removeChild","ReactDOM","createPortal","children","ImageModal","src_Modal","onClick","e","handleClose","ViewAlbum","albumID","params","aid","setAlbumDetails","_useState5","_useState6","shown","setShown","_useState7","_useState8","selectedPhotoID","setSelectedPhotoID","_useState9","_useState10","selectedPhotoNumber","setSelectedPhotoNumber","_useState11","_useState12","currentPageNumber","setCurrentPageNumber","_useState13","_useState14","currentPageToken","setCurrentPageToken","_useState15","_useState16","previousPageTokenArray","setPreviousPageTokenArray","handleClickShowOrHide","pid","arguments","pnumber","preventDefault","targetClassName","target","parseInt","loadAlbumDetail","result","mediaItems","mediaItem","itemIndex","href","src_ImageModal","src_ViewPhoto","mediaItemsCount","handleClickPrevious","Math","ceil","nextPageToken","concat","toConsumableArray","handleClickNext","About","GooglePhotosService","gapiClient","classCallCheck","this","photoslibrary","list","fullResponse","token","_this","get","albumId","response","album","search","pageToken","objectSpread","catch","mediaItemId","SCOPE","App","initialising","setInitialising","isAuthorised","setIsAuthorised","photoService","setPhotoService","intervalId","setInterval","window","gapi","clearInterval","load","client","init","discoveryDocs","clientId","gapiID","scope","auth","auth2","getAuthInstance","isSignedIn","listen","user","hasGrantedScopes","currentUser","startAuth","onSignOut","useCallback","signOut","onSignIn","signIn","Provider","value","react_router","path","exact","component","Boolean","location","hostname","render","src_App","process","REACT_APP_GAPI_CLIENT_ID","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e771580.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst context = createContext(undefined);\n\nexport default context;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction HeaderBreadcrumb(props) {\n  return (\n    <div className=\"header\">\n      <h2>\n        {props.albumDetails && props.albumDetails.title ? (\n          <Link to=\"/\">Albums</Link>\n        ) : (\n          'Albums'\n        )}\n        {props.albumDetails && props.albumDetails.title && (\n          <span>\n            &nbsp;&raquo;&nbsp;\n            {props.albumDetails.title}\n          </span>\n        )}\n      </h2>\n    </div>\n  );\n}\n\nexport default HeaderBreadcrumb;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PhotoServiceContext from './PhotoServiceContext';\nimport HeaderBreadcrumb from './HeaderBreadcrumb';\n\nfunction AlbumsList() {\n  const service = useContext(PhotoServiceContext); // new GooglePhotosService();\n  const [albums, setAlbums] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // useEffect only runs once to get the promise data initially.\n  useEffect(\n    function () {\n      const promise = service.loadAlbums();\n      promise.then(function (arg) {\n        setAlbums(arg);\n        setIsLoading(false);\n      });\n    },\n    [service]\n  );\n\n  const newAlbums = albums.map(function (obj) {\n    return (\n      <li key={obj.id}>\n        <Link to={'/album/' + obj.id}>\n          <figure>\n            <img src={obj.coverPhotoBaseUrl} alt=\"\" />\n            <figcaption>\n              <h3>{obj.title}</h3>\n            </figcaption>\n          </figure>\n        </Link>\n        <br />\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      {isLoading && 'Loading...'}\n      {albums.length > 0 && (\n        <div>\n          {/* console.log('AlbumsList albums', albums) */}\n\n          <HeaderBreadcrumb />\n\n          <ul className=\"albums\">{newAlbums}</ul>\n        </div>\n      )}\n\n      <hr />\n      <Link to=\"/\">Back to Albums List</Link>\n    </div>\n  );\n}\n\nexport default AlbumsList;\n","import React, { useState, useEffect, useContext } from 'react';\nimport PhotoServiceContext from './PhotoServiceContext';\n\nfunction ViewPhoto(props) {\n  const photoID = props.photoID; //props.match.params.pid\n  const photoNumber = props.photoNumber;\n  const photosTotal = props.photosTotal;\n  console.log('ViewPhoto -', photoID, photoNumber, photosTotal);\n\n  const service = useContext(PhotoServiceContext);\n  const [photoDetails, setPhotoDetails] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(\n    function () {\n      const promise = service.loadPhotoDetail(photoID);\n      promise.then(function (arg) {\n        setPhotoDetails(arg);\n        setIsLoading(false);\n      });\n    },\n    [props.match, service, photoID] // keep watching this for changes\n  );\n\n  return (\n    <div>\n      {isLoading && (\n        <figure>\n          <figcaption>'Loading...'</figcaption>\n        </figure>\n      )}\n      {!isLoading && photoDetails && (\n        <figure>\n          <img src={photoDetails.baseUrl} alt=\"\" />\n          <figcaption>\n            {photoNumber} of {photosTotal}\n          </figcaption>\n        </figure>\n      )}\n      {!isLoading && !photoDetails && (\n        <figure>\n          <figcaption>Photo not found</figcaption>\n        </figure>\n      )}\n    </div>\n  );\n}\n\nexport default ViewPhoto;\n","import React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\n// Source: https://www.thomasmaximini.com/building-fullscreen-overlays-with-react-16-portals\n// use the same div here that I mount my app into\n// so the modal will be a sibling of the rest of the app\n// in the DOM hierachy\nconst modalRoot = document.getElementById('root');\n\nfunction Modal(props) {\n  // constructor\n  const el = document.createElement('div');\n  el.setAttribute('id', 'modal');\n\n  // Similar to componentDidMount and componentDidUpdate\n  useEffect(function () {\n    modalRoot.appendChild(el);\n\n    // Equivalent to componentWillUnmount\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      modalRoot.removeChild(el);\n    };\n  });\n\n  return ReactDOM.createPortal(props.children, el);\n}\n\nexport default Modal;\n","import React from 'react';\nimport Modal from './Modal';\n\n// props.children renders child nodes within ImageModal\nfunction ImageModal(props) {\n  return (\n    <Modal>\n      <div\n        className=\"wrapper\"\n        onClick={(e) => {\n          props.handleClose(e);\n        }}\n      >\n        {/* className={ props.shown ? '' : 'hidden' } */}\n        <div className=\"inner\">{props.children}</div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default ImageModal;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\nimport PhotoServiceContext from './PhotoServiceContext';\nimport HeaderBreadcrumb from './HeaderBreadcrumb';\nimport ViewPhoto from './ViewPhoto';\nimport ImageModal from './ImageModal';\n\nfunction ViewAlbum(props) {\n  const albumID = props.match.params.aid;\n\n  // const service = new DummyGooglePhotosService();\n  const service = useContext(PhotoServiceContext);\n\n  const [albumDetails, setAlbumDetails] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n  const [shown, setShown] = useState(false);\n  const [selectedPhotoID, setSelectedPhotoID] = useState(undefined);\n  const [selectedPhotoNumber, setSelectedPhotoNumber] = useState(undefined);\n  const [currentPageNumber, setCurrentPageNumber] = useState(1);\n  const [currentPageToken, setCurrentPageToken] = useState(undefined);\n  const [previousPageTokenArray, setPreviousPageTokenArray] = useState([\n    undefined,\n  ]);\n\n  const handleClickShowOrHide = (e, pid = undefined, pnumber = undefined) => {\n    e.preventDefault(); // cancel default behaviour of opening a link\n    const targetClassName = e.target.className; // .tagName.toLowerCase()\n\n    if (shown) {\n      if (targetClassName === 'inner' || targetClassName === 'wrapper') {\n        setShown(false);\n      }\n    } else {\n      setSelectedPhotoID(pid);\n      setSelectedPhotoNumber(parseInt(pnumber) + 1);\n      setShown(true);\n    }\n  };\n\n  /* Modal resource: https://www.thomasmaximini.com/building-fullscreen-overlays-with-react-16-portals */\n  const renderModal = () => {\n    return (\n      <ImageModal handleClose={handleClickShowOrHide} shown={shown}>\n        <ViewPhoto\n          photoID={selectedPhotoID}\n          photoNumber={selectedPhotoNumber}\n          photosTotal={albumDetails.mediaItemsCount}\n        />\n      </ImageModal>\n    );\n  };\n\n  useEffect(\n    () => {\n      const promise = service.loadAlbumDetail(albumID, currentPageToken);\n      promise.then(function (arg) {\n        setAlbumDetails(arg);\n        setIsLoading(false);\n      });\n    },\n    [props.match, service, albumID, currentPageToken] // keep watching this for changes\n  );\n\n  const handleClickNext = (e) => {\n    e.preventDefault();\n    // check if previous page token of current page exists\n    if (typeof previousPageTokenArray[currentPageNumber] === 'undefined') {\n      setPreviousPageTokenArray([...previousPageTokenArray, currentPageToken]);\n    }\n    setCurrentPageToken(albumDetails.result.nextPageToken);\n    setCurrentPageNumber(currentPageNumber + 1);\n  };\n\n  const handleClickPrevious = (e) => {\n    e.preventDefault();\n    setCurrentPageToken(previousPageTokenArray[currentPageNumber - 1]);\n    setCurrentPageNumber(currentPageNumber - 1);\n  };\n\n  return (\n    <div>\n      {isLoading && <span>'Loading...'</span>}\n      {!isLoading && albumDetails && (\n        <div>\n          <HeaderBreadcrumb albumDetails={albumDetails} />\n\n          <ul>\n            {albumDetails.result.mediaItems.map(function (\n              mediaItem,\n              itemIndex\n            ) {\n              return (\n                <li key={mediaItem.id}>\n                  <a\n                    href=\"#\"\n                    onClick={(e) => {\n                      handleClickShowOrHide(e, mediaItem.id, itemIndex);\n                    }}\n                  >\n                    <figure>\n                      <img src={mediaItem.baseUrl} alt=\"\" />\n                    </figure>\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n\n          {shown && renderModal()}\n\n          <div id=\"pagination\">\n            {currentPageToken && (\n              <span>\n                <a\n                  href=\"#\"\n                  onClick={(e) => {\n                    handleClickPrevious(e);\n                  }}\n                >\n                  Prev\n                </a>\n                &nbsp;\n              </span>\n            )}\n\n            <span>\n              {currentPageNumber} of{' '}\n              {Math.ceil(albumDetails.mediaItemsCount / 25)}\n            </span>\n\n            {albumDetails.result.nextPageToken && (\n              <span>\n                &nbsp;\n                <a\n                  href=\"#\"\n                  onClick={(e) => {\n                    handleClickNext(e);\n                  }}\n                >\n                  Next\n                </a>\n              </span>\n            )}\n          </div>\n        </div>\n      )}\n      {!isLoading && !albumDetails && <span>Album not found</span>}\n\n      <hr />\n      <Link to=\"/\">Back to Albums List</Link>\n    </div>\n  );\n}\n\nexport default ViewAlbum;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction About() {\n  return (\n    <div>\n      This site was made with React 16.8, Google Photos API, and SASS.\n      <br />\n      <Link to=\"/\">Back</Link>\n    </div>\n  );\n}\n\nexport default About;\n","class GooglePhotosService {\n  constructor(gapiClient) {\n    this.gapiClient = gapiClient;\n  }\n\n  loadAlbums() {\n    return this.gapiClient.photoslibrary.albums\n      .list({})\n      .then(function (fullResponse) {\n        // { result: { albums } }\n        const albums = fullResponse.result.albums;\n        // Handle the results here (response.result has the parsed body).\n        return albums;\n      });\n  }\n\n  loadAlbumDetail(id, token) {\n    return this.gapiClient.photoslibrary.albums\n      .get({ albumId: id })\n      .then((response) => {\n        return response.result;\n      })\n      .then((album) => {\n        //console.log('loadAlbumDetail album', album)\n        return this.gapiClient.photoslibrary.mediaItems\n          .search({ albumId: id, pageToken: token })\n          .then(function (response) {\n            //console.log('loadAlbumDetail then response', response)\n\n            // join album data with mediaItems corresponding to album\n            return {\n              ...album,\n              result: response.result,\n            };\n          });\n      })\n      .catch(function (e) {\n        return undefined;\n      });\n  }\n\n  loadPhotoDetail(id) {\n    return this.gapiClient.photoslibrary.mediaItems\n      .get({ mediaItemId: id })\n      .then((response) => {\n        return response.result;\n      })\n      .catch(function (e) {\n        return undefined;\n      });\n  }\n}\n\nexport default GooglePhotosService;\n","/* global gapi */\nimport React, { useEffect, useCallback, useState } from 'react';\nimport AlbumsList from './AlbumsList';\nimport ViewAlbum from './ViewAlbum';\nimport About from './About';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport PhotoServiceContext from './PhotoServiceContext';\n// import DummyGooglePhotosService from './DummyGooglePhotosService';\nimport GooglePhotosService from './GooglePhotosService';\n\nconst SCOPE = 'https://www.googleapis.com/auth/photoslibrary.readonly';\n\nfunction App(props) {\n  const [initialising, setInitialising] = useState(true);\n  const [isAuthorised, setIsAuthorised] = useState(false);\n  const [photoService, setPhotoService] = useState(undefined);\n\n  useEffect(() => {\n    console.log(\"we've mounted\");\n\n    const intervalId = setInterval(() => {\n      if (!window.gapi) {\n        return;\n      }\n\n      clearInterval(intervalId);\n      gapi.load('client:auth2', () => {\n        gapi.client\n          .init({\n            discoveryDocs: [\n              'https://photoslibrary.googleapis.com/$discovery/rest?version=v1',\n            ],\n            clientId: props.gapiID,\n            scope: SCOPE,\n          })\n          .then(function () {\n            setInitialising(false);\n\n            const auth = gapi.auth2.getAuthInstance();\n            auth.isSignedIn.listen(() => {\n              setIsAuthorised(user.hasGrantedScopes(SCOPE));\n            });\n\n            const user = auth.currentUser.get();\n            const startAuth = user.hasGrantedScopes(SCOPE);\n            setPhotoService(new GooglePhotosService(gapi.client));\n            setIsAuthorised(startAuth);\n\n            // gapi.client.photoslibrary.albums.list({})\n            //   .then(function(response) {\n            //     // Handle the results here (response.result has the parsed body).\n            //     console.log(\"Album Response\", response);\n            //   });\n          });\n      });\n    }, 100);\n  }, [props.gapiID]);\n\n  const onSignOut = useCallback(() => {\n    gapi.auth2.getAuthInstance().signOut();\n  }, []);\n\n  const onSignIn = useCallback(() => {\n    gapi.auth2.getAuthInstance().signIn();\n  }, []);\n\n  if (initialising) {\n    return <div>Initialising...</div>;\n  }\n\n  if (!isAuthorised) {\n    return <button onClick={onSignIn}>Sign in</button>;\n  }\n\n  return (\n    <div className=\"App\">\n      <PhotoServiceContext.Provider value={photoService}>\n        <Router>\n          <button onClick={onSignOut}>Sign Out</button>\n\n          <Route path=\"/\" exact component={AlbumsList} />\n          <Route path=\"/album/:aid\" component={ViewAlbum} />\n          <Route path=\"/about\" component={About} />\n        </Router>\n      </PhotoServiceContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/* global fetch */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/style.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App gapiID={process.env.REACT_APP_GAPI_CLIENT_ID} />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}